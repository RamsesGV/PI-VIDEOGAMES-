{"version":3,"sources":["components/styles/Loading.module.css","components/styles/Home.module.css","components/styles/CreateGame.module.css","components/styles/LandingPage.module.css","components/styles/Card.module.css","components/styles/Pages.module.css","components/styles/Details.module.css","components/LandingPage.jsx","components/Card.jsx","components/Loading.jsx","actions/types.js","actions/index.js","components/Paged.jsx","components/Home.jsx","components/Details.jsx","components/CreateGame.jsx","components/EditVideoGame.jsx","App.js","reportWebVitals.js","reducer/index.js","store/index.js","index.js"],"names":["module","exports","LandingPage","btn","styles","landingPageContainer","titleContainer","h1Font","h4","_jsx","className","children","_jsxs","style","margin","Link","to","Card","props","name","img","genres","card","cardImage","h3","length","slice","backgroundImage","concat","Loading","loader","circles","one","two","three","pacman","top","bottom","left","eye","GET_ALL_VIDEOGAMES","GET_VIDEOGAMES_BY_ORIGIN","GET_VIDEOGAMES_BY_NAME","GET_VIDEOGAME_BY_ID","GET_GENRES","ORDER_ALPHABETICALLY","FILTER_BY_GENRES","ORDER_BY_RAITING","DELETED_GAME","DELETE_STATES","getDetailVideoGame","id","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","dispatch","response","wrap","_context2","prev","next","axios","get","sent","abrupt","type","payload","data","t0","error","originalError","stop","_x2","apply","arguments","getGenres","_ref4","_callee4","_context4","_x3","getVideogameByName","_ref5","_callee5","_context5","_x4","pagedContainer","pagedButtonsContainer","Paged","videoGamesPP","allVideoGames","paged","pageNumbers","i","Math","ceil","push","map","n","onClick","Home","useDispatch","allVideogames","useSelector","state","videogames","_useState","useState","_useState2","_slicedToArray","currentPage","setCurrentPage","_useState3","indexOfLastVideoGame","indexOfFirstVideoGame","_useState5","_useState6","current","setCurrent","useEffect","_ref","_callee","_context","_x","_useState7","_useState8","search","setSearch","handleOrderAlphabetically","e","preventDefault","target","value","handleOrderRating","handleFilterGenres","handleGetVideoGamesByOrigin","handleClearFilters","console","log","_ref7","_callee7","_context7","_x6","containerCard","containerLoading","searchBar","select","searchGame","searchBtn","createGame","refresh","_Fragment","onChange","defaultValue","disabled","el","autoComplete","placeholder","_objectSpread","_defineProperty","handleChange","handleSearch","marginTop","createdInDb","image","join","Details","_detailVideoGame$plat","_detailVideoGame$genr","_detailVideoGame$plat2","_detailVideoGame$genr2","history","useHistory","detailVideoGame","details","match","params","handleDeleteGame","window","confirm","alert","_ref6","_callee6","_context6","delete","_x5","location","replace","containerDetails","deleteGame","src","alt","releaseDate","rating","dangerouslySetInnerHTML","__html","description","platforms","released","CreateGame","errors","setErrors","_useState4","values","setValues","test","validators","handleSubmit","_callee3","_context3","post","Date","container","inputForm","raiting","nameCss","deleteBtn","createGameBtn","onSubmit","maxLength","step","max","min","includes","_toConsumableArray","handleChangePlatform","p","filter","handleDeletePlatform","handleChangeGenre","g","handleDeleteGenre","EditVideoGame","App","Router","textAlign","Switch","Route","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","getAllVideoGames","getAllVideoGames2","rootReducer","undefined","action","sortedArr","sort","a","b","nameA","toLowerCase","nameB","ratingFiltered","filteredArr","filterMyGames","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","Provider","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5aedddf8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loading_loader__3zg1x\",\"circles\":\"Loading_circles__3D3Xp\",\"animcircle\":\"Loading_animcircle__7ayF6\",\"one\":\"Loading_one__r0MvC\",\"two\":\"Loading_two__YCW9F\",\"three\":\"Loading_three__3fMDw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerCard\":\"Home_containerCard__nQbjT\",\"containerLoading\":\"Home_containerLoading__2gokG\",\"searchBar\":\"Home_searchBar__2f-Le\",\"select\":\"Home_select__3DhAv\",\"glow\":\"Home_glow__3zUAM\",\"searchGame\":\"Home_searchGame__3w745\",\"searchBtn\":\"Home_searchBtn__fbzZb\",\"createGame\":\"Home_createGame__53SE-\",\"move\":\"Home_move__2LCyi\",\"refresh\":\"Home_refresh__1Oj0B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CreateGame_container__BrA4T\",\"inputForm\":\"CreateGame_inputForm__1JrA4\",\"glow\":\"CreateGame_glow__1fwyG\",\"nameCss\":\"CreateGame_nameCss__1_l_h\",\"raiting\":\"CreateGame_raiting__3o_NJ\",\"deleteBtn\":\"CreateGame_deleteBtn__1ch0N\",\"createGameBtn\":\"CreateGame_createGameBtn__2mR97\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"h1Font\":\"LandingPage_h1Font__1CYOi\",\"glow\":\"LandingPage_glow__EjBVB\",\"h4\":\"LandingPage_h4__1HPuO\",\"btn\":\"LandingPage_btn__2U8XQ\",\"move\":\"LandingPage_move__qw1bJ\",\"landingPageContainer\":\"LandingPage_landingPageContainer__1tCQW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3LUxR\",\"move\":\"Card_move__ni3oD\",\"image\":\"Card_image__2yv2d\",\"cardImage\":\"Card_cardImage__Yc6vc\",\"h3\":\"Card_h3__1yxns\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagedButtonsContainer\":\"Pages_pagedButtonsContainer__262Yo\",\"btn\":\"Pages_btn__1-1RQ\",\"glow\":\"Pages_glow__3qdyZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerDetails\":\"Details_containerDetails__7yY9D\",\"backgroundImage\":\"Details_backgroundImage__2RmCN\",\"deleteGame\":\"Details_deleteGame__d9Wux\"};","/*\r\nEn resumen, el componente LandingPage muestra una página de inicio \r\nsimple con un título, un subtítulo y un botón para iniciar la exploración \r\nde videojuegos. Al hacer clic en el botón, \r\nel usuario será redirigido a la ruta /home. \r\nLos estilos CSS se aplican a través de las clases \r\nextraídas del archivo LandingPage.module.css.\r\n */\r\n\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styles from './styles/LandingPage.module.css';\r\n\r\n\r\nconst LandingPage = () => {\r\n    const { btn , landingPageContainer, titleContainer, h1Font, h4 } = styles;\r\n    return (\r\n        <div className={landingPageContainer}>\r\n            <div className={titleContainer}>\r\n                <h1 style={{ margin: \"0\" }} className={h1Font}> Welcome to ARGV Videogames! </h1>\r\n                <h4 className={h4}>You will be able to explore, create and learn more about your favorite games.</h4>\r\n                <Link to='/home'>\r\n                    <button className={btn} >Home</button>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default LandingPage;\r\n","/*\r\nCard es un componente funcional en React\r\nque representa una tarjeta de visualización de información\r\n */\r\n\r\nimport React from 'react'\r\nimport styles from './styles/Card.module.css'\r\n\r\n/*\r\nDefine el componente Card como una función de flecha que recibe \r\nprops como argumento. \r\nLas props contienen los datos que se pasan al componente \r\ndesde su componente padre.\r\n */\r\nconst Card = (props) => {\r\n\r\n    /*\r\n    Extrae las propiedades name, img y genres del objeto props \r\n    para poder utilizarlas directamente en el componente.\r\n     */\r\n    const {\r\n        name,\r\n        img,\r\n        genres\r\n    } = props\r\n\r\n    const { card, cardImage, h3 } = styles\r\n    return (\r\n\r\n\r\n        /*\r\n        Renderiza un encabezado h3 con la clase CSS h3. \r\n        El contenido del encabezado es el nombre del juego (name).\r\n        Si la longitud del nombre es mayor a 24 caracteres, \r\n        se muestra una versión truncada del nombre \r\n        utilizando el método slice(0, 23). \r\n        De lo contrario, se muestra el nombre completo.\r\n         */\r\n\r\n        /*\r\n        Renderiza un encabezado h6 para mostrar los géneros del juego (genres).\r\n         */\r\n\r\n        <div className={card}>\r\n            <h3 className={h3}>{name?.length > 24 ? name.slice(0, 23) : name}</h3>\r\n            <div className={cardImage} style={{ backgroundImage: `url(${img})` }} />\r\n            <h6> {genres}</h6>\r\n        </div>\r\n\r\n    )\r\n}\r\n/*\r\nExporta el componente Card para poder utilizarlo en otros componentes de la aplicación.\r\n */\r\nexport default Card\r\n\r\n/*\r\nEn resumen, el componente Card representa una tarjeta de visualización \r\nde información que muestra el nombre de un juego, su imagen y sus géneros. \r\nSe utiliza para representar visualmente los datos de un juego\r\nen la interfaz de usuario.\r\n */","import React from \"react\";\r\nimport styles from './styles/Loading.module.css'\r\n\r\nconst Loading = () => {\r\n\r\n    const {\r\n        loader,\r\n        circles,\r\n        one,\r\n        two,\r\n        three,\r\n        pacman,\r\n        top,\r\n        bottom,\r\n        left,\r\n        eye } = styles;\r\n\r\n    return (\r\n        <div className={loader}>\r\n            <div className={circles}>\r\n                <span className={one}></span>\r\n                <span className={two}></span>\r\n                <span className={three}></span>\r\n            </div>\r\n            <div className={pacman}>\r\n                <span className={top}></span>\r\n                <span className={bottom}></span>\r\n                <span className={left}></span>\r\n                <div className={eye}></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Loading;","export const GET_ALL_VIDEOGAMES = 'GET_ALL_VIDEOGAMES'; //home\r\nexport const GET_VIDEOGAMES_BY_ORIGIN = 'GET_VIDEOGAMES_BY_ORIGIN'; //JUEGOS DE LA DB\r\nexport const GET_VIDEOGAMES_BY_NAME = 'GET_VIDEOGAMES_BY_NAME'; //BUSCA POR NOMBRE DE VIDEOGAME\r\nexport const GET_VIDEOGAME_BY_ID = 'GET_VIDEOGAME_BY_ID';\r\nexport const GET_GENRES = 'GET_GENRES';\r\nexport const ORDER_ALPHABETICALLY = 'ORDER_ALPHABETICALLY'; // ORDEN ALFABETICO\r\nexport const FILTER_BY_GENRES = 'FILTER_BY_GENRES';\r\nexport const ORDER_BY_RAITING = 'ORDER_BY_RAITING'; //MAS POPULARES\r\nexport const CREATED_GAMES = 'CREATED_GAMES'; // JUEGOS DE LA DB\r\nexport const CREATE_GAME = 'CREATE_GAME' // POST - FORMULARIO\r\nexport const MODIFY_GAME = 'MODIFY_GAME'; //PUT - FORMULARIO \r\nexport const DELETED_GAME = 'DELETED_GAME';\r\nexport const DELETE_STATES = 'DELETE_STATES'\r\n\r\n","//ACTIONS\r\n\r\n/*\r\nEn esta sección, \r\nse importa el módulo axios para realizar las solicitudes HTTP \r\ny se importan las constantes utilizadas como tipos de acción en el flujo de Redux.\r\n */ \r\nimport axios from 'axios';\r\nimport {\r\n    GET_ALL_VIDEOGAMES,\r\n    GET_VIDEOGAME_BY_ID,\r\n    GET_GENRES,\r\n    ORDER_ALPHABETICALLY,\r\n    ORDER_BY_RAITING,\r\n    FILTER_BY_GENRES,\r\n    GET_VIDEOGAMES_BY_ORIGIN,\r\n    GET_VIDEOGAMES_BY_NAME,\r\n    DELETED_GAME,\r\n    DELETE_STATES,\r\n   // MODIFY_GAME\r\n} from './types.js'\r\n\r\n/*\r\nEsta es una acción asincrónica (async) \r\nque obtiene todos los videojuegos. \r\nDentro de la función, \r\nse realiza una solicitud GET a la URL http://localhost:3001/videogames \r\nutilizando axios.get(). \r\nEl resultado se envía al almacenamiento Redux a través de dispatch con el tipo \r\nde acción GET_ALL_VIDEOGAMES y los datos de respuesta como carga (payload).\r\n */\r\nexport const getAllVideoGames = () => {\r\n    return async function (dispatch) {\r\n        let response = await axios.get(`http://localhost:3001/videogames`, {})\r\n        return dispatch({\r\n            type: GET_ALL_VIDEOGAMES,\r\n            payload: response.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\n/*\r\nEsta acción asincrónica obtiene los detalles de un videojuego específico según su ID. \r\nSe realiza una solicitud GET a la URL http://localhost:3001/videogames/${id}. \r\nSi la solicitud es exitosa, \r\nse envían los detalles del videojuego al almacenamiento Redux \r\ncon el tipo de acción GET_VIDEOGAME_BY_ID y los datos de respuesta como carga. \r\nEn caso de error, se devuelve un objeto con información de error\r\n */\r\nexport const getDetailVideoGame = (id) => {\r\n    return async function (dispatch) {\r\n        try {\r\n            let response = await axios.get(`http://localhost:3001/videogames/${id}`);\r\n            return dispatch({\r\n                type: GET_VIDEOGAME_BY_ID,\r\n                payload: response.data\r\n            })\r\n        } catch (error) {\r\n            return {\r\n                error: 'No hay detalles para mostrar',\r\n                originalError: error,\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\nEsta acción asincrónica crea un nuevo videojuego. \r\nSe realiza una solicitud POST a la URL http://localhost:3001/videogames \r\ncon los datos del videojuego proporcionados en el objeto payload. \r\nSi la solicitud es exitosa, \r\nse devuelve la respuesta. En caso de error, \r\nse devuelve un objeto con información de error\r\n */\r\nexport const createVideoGame = (payload) => {\r\n    return async function () {\r\n        try {\r\n            let {\r\n                name,\r\n                image,\r\n                description,\r\n                released,\r\n                rating,\r\n                platforms,\r\n                genres\r\n            } = payload;\r\n            let response = await axios.post(`http://localhost:3001/videogames`, {\r\n                name,\r\n                image,\r\n                description,\r\n                releaseDate: new Date(released),\r\n                rating,\r\n                platforms,\r\n                genres,\r\n            })\r\n            return response;\r\n        } catch (error) {\r\n            return {\r\n                error: \"Can't Create Videogame\",\r\n                originalError: error\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*\r\nEsta acción asincrónica obtiene los géneros de videojuegos disponibles. \r\nSe realiza una solicitud GET a la URL http://localhost:3001/genres. \r\nSi la solicitud es exitosa, \r\nse envían los géneros al almacenamiento Redux con el tipo de acción GET_GENRES \r\ny los datos de respuesta como carga. En caso de error, \r\nse devuelve un objeto con información de error.\r\n */\r\nexport const getGenres = (payload) => {\r\n    return async function (dispatch) {\r\n        try {\r\n            let response = await axios.get(`http://localhost:3001/genres`, payload)\r\n            return dispatch({\r\n                type: GET_GENRES,\r\n                payload: response.data\r\n            });\r\n        } catch (error) {\r\n            return {\r\n                error: \"Can't Get Genres\",\r\n                originalError: error\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*\r\nEstas acciones son acciones síncronas que ordenan los videojuegos alfabéticamente, \r\npor clasificación o por género. \r\nCada acción devuelve un objeto con el tipo de acción correspondiente \r\ny los datos proporcionados como carga (payload)..\r\n */\r\nexport const orderAlphabetically = (payload) => {\r\n    return {\r\n        type: ORDER_ALPHABETICALLY,\r\n        payload\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const orderByRating = (payload) => {\r\n    return {\r\n        type: ORDER_BY_RAITING,\r\n        payload\r\n    }\r\n}\r\n\r\nexport const filterByGenres = (payload) => {\r\n    return {\r\n        type: FILTER_BY_GENRES,\r\n        payload\r\n    }\r\n}\r\n\r\nexport const getVideoGamesByOrigin = (payload) => {\r\n    return {\r\n        type: GET_VIDEOGAMES_BY_ORIGIN,\r\n        payload\r\n    }\r\n}\r\n\r\n\r\n/*\r\nEsta acción asincrónica obtiene los videojuegos por su nombre. \r\nSe realiza una solicitud GET a la URL http://localhost:3001/videogames?name=${name} \r\ncon el nombre proporcionado como parámetro de consulta. \r\nSi la solicitud es exitosa, \r\nse envían los videojuegos encontrados al almacenamiento Redux con el tipo de acción \r\nGET_VIDEOGAMES_BY_NAME y los datos de respuesta como carga. \r\nEn caso de error, se devuelve un objeto con información de error.\r\n */\r\nexport const getVideogameByName = (name) => {\r\n    return async function (dispatch) {\r\n        try {\r\n            let response = await axios.get(`http://localhost:3001/videogames?name=${name}`)\r\n            return dispatch({\r\n                type: GET_VIDEOGAMES_BY_NAME,\r\n                payload: response.data\r\n            })\r\n        } catch (err) {\r\n            return {\r\n                error: \"No games found with that name.\",\r\n                originalError: err\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*\r\nEsta acción asincrónica elimina un videojuego según su ID. \r\nSe realiza una solicitud DELETE a la URL http://localhost:3001/videogames/${id}. \r\nSi la solicitud es exitosa, se envía la respuesta al almacenamiento Redux \r\ncon el tipo de acción DELETED_GAME y los datos de  respuesta como carga. \r\nEn caso de error, se devuelve un objeto con información de error.\r\n */\r\nexport const deleteVideoGame = (id) => {\r\n    return async function (dispatch) {\r\n        try {\r\n            console.log(id)\r\n            let response = await axios.delete(`http://localhost:3001/videogames/${id}`)\r\n            return dispatch({\r\n                type: DELETED_GAME,\r\n                payload: response.data\r\n            })\r\n        } catch (error) {\r\n            return {\r\n                error: 'No se pudo eliminar el juego',\r\n                originalError: error\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/*\r\nEsta acción asincrónica borra los estados. \r\nEnvía una acción al almacenamiento Redux con el tipo de acción DELETE_STATES.\r\n */\r\nexport const deleteStates = () => {\r\n    return async function (dispatch) {\r\n        return dispatch({\r\n            type: DELETE_STATES,\r\n        })\r\n    }\r\n}\r\n\r\nexport const searchGameByPlatforms = () => { }\r\n\r\n//export const modifyVideoGame = (id,payload) => {\r\n   // return {\r\n      //  type: MODIFY_GAME,\r\n      ///  payload: {\r\n       /// id,\r\n       // data: payload,\r\n       // },\r\n   // };\r\n//}\r\n\r\n","import React from \"react\";\r\nimport styles from './styles/Pages.module.css';\r\n\r\nconst { pagedContainer, pagedButtonsContainer, btn} = styles;\r\n\r\n/*\r\nexport default function Paged(props) \r\n{ ... }: Exporta por defecto una función anónima como \r\nel componente Paged que recibe props como argumento.\r\n */\r\nexport default function Paged(props) {\r\n  /*\r\n  const { videoGamesPP, allVideoGames, paged } = props: \r\n  Utiliza la desestructuración de objetos para extraer las \r\n  propiedades videoGamesPP, allVideoGames y paged de las props recibidas.\r\n   */\r\n  const { videoGamesPP, allVideoGames, paged } = props;\r\n\r\n  /*\r\n  let pageNumbers = []: \r\n  Crea una variable pageNumbers como una matriz vacía \r\n  que se utilizará para almacenar los números de página.\r\n   */\r\n  let pageNumbers = [];\r\n\r\n  /*\r\n  Utiliza un bucle for para generar los números de página \r\n  y agregarlos a la matriz pageNumbers. \r\n  La cantidad de números de página se calcula dividiendo \r\n  la cantidad total de videojuegos (allVideoGames) \r\n  por la cantidad de videojuegos por página (videoGamesPP), \r\n  y redondeando hacia arriba utilizando Math.ceil()\r\n   */\r\n  for (let i = 1; i <= Math.ceil(allVideoGames / videoGamesPP); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  /*\r\n  Utiliza la sintaxis de JSX \r\n  y el método map() para generar una serie de elementos de botón \r\n  basados en los números de página almacenados en pageNumbers. \r\n  El operador && se utiliza para asegurarse de que pageNumbers \r\n  tenga un valor antes de realizar el mapeo.\r\n   */\r\n  return (\r\n    <nav className={pagedContainer}>\r\n      <ul className={pagedButtonsContainer}>\r\n        {pageNumbers && pageNumbers.map(n => (\r\n          <button key={n} className={btn} onClick={() => paged(n)}>{n}</button>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Card from \"./Card.jsx\"\r\nimport Loading from \"./Loading\";\r\nimport styles from './styles/Home.module.css'\r\n// import {imageSearch} from '../imagenes/imageSearch.png'\r\nimport {\r\n    getAllVideoGames,\r\n    getGenres,\r\n    filterByGenres,\r\n    getVideogameByName,\r\n    getVideoGamesByOrigin,\r\n    orderAlphabetically,\r\n    orderByRating,\r\n    deleteStates,\r\n} from '../actions/index.js'\r\n\r\n//Components\r\nimport Paged from \"./Paged\";\r\n\r\nconst Home = () => {\r\n    //!------ PAGINADO -------\r\n\r\n    /*\r\n    allVideogames y genres se asignan a los resultados \r\n    de los selectores de Redux. Estos selectores obtienen \r\n    los datos relevantes del estado global de Redux.\r\n    Se utiliza el estado local currentPage para realizar \r\n    un seguimiento de la página actual.\r\n    setCurrentPage es una función que se utiliza para actualizar \r\n    el estado de currentPage.\r\n    videoGamesPP se establece en 15, \r\n    lo que significa que se mostrarán 15 videojuegos por página.\r\n     */\r\n    const dispatch = useDispatch()\r\n    const allVideogames = useSelector((state) => state.videogames)\r\n    const genres = useSelector((state) => state.genres);\r\n    //Estado de la página: \r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [videoGamesPP,] = useState(15);\r\n    //division del array por cantidad de páginas requeridas\r\n    /*\r\n    indexOfLastVideoGame se calcula multiplicando \r\n    currentPage por videoGamesPP. \r\n    Esto da como resultado el índice \r\n    del último videojuego en la página actual.\r\n     */\r\n    const indexOfLastVideoGame = currentPage * videoGamesPP; // 1 *  15\r\n    const indexOfFirstVideoGame = indexOfLastVideoGame - videoGamesPP; // 0 \r\n    /*\r\n    current se inicializa como una matriz vacía.\r\n    Aquí se almacenarán los videojuegos que se mostrarán \r\n    en la página actual.\r\n     */\r\n    const [current, setCurrent] = useState([]); //current 15VG\r\n\r\n    useEffect(() => {\r\n        /*\r\n        dispatch(getGenres()) \r\n        se ejecuta para obtener los géneros de la API/BD \r\n        y almacenarlos en el estado global de Redux.\r\n         */\r\n        dispatch(getGenres())\r\n        /*\r\n        let vg = allVideogames && allVideogames; \r\n        crea una variable vg que almacena allVideogames si existe.\r\n         */\r\n        let vg = allVideogames && allVideogames;\r\n        /*\r\n        Si la longitud de vg es igual a cero, \r\n        significa que no hay videojuegos en el estado global de Redux. \r\n        En ese caso, se ejecuta dispatch(getAllVideoGames()) \r\n        para obtener todos los videojuegos de la API \r\n        y almacenarlos en el estado global.\r\n         */\r\n        if (vg.length === 0) {\r\n            dispatch(getAllVideoGames())\r\n        }\r\n        /*\r\n        setCurrent se utiliza para establecer los videojuegos actuales \r\n        en función de allVideogames, \r\n        tomando un subconjunto que corresponde a los videojuegos \r\n        en la página actual \r\n        (utilizando slice(indexOfFirstVideoGame, indexOfLastVideoGame)).\r\n         */\r\n        setCurrent(\r\n            allVideogames.slice(indexOfFirstVideoGame, indexOfLastVideoGame)\r\n        )\r\n    }, [allVideogames, indexOfFirstVideoGame, indexOfLastVideoGame, dispatch]\r\n    );\r\n    /*\r\n    La función paged se define para actualizar currentPage \r\n    cuando se hace clic en un número de página en el componente Paged.\r\n     */\r\n    const paged = (pageNumbers) => { // prop del componente paged matriz vacia.\r\n        setCurrentPage(pageNumbers);\r\n    };\r\n    /*\r\n    En resumen, este bloque de código inicializa los géneros, \r\n    carga los videojuegos si no existen en el estado global \r\n    y establece los videojuegos actuales en función de la página actual. \r\n    Además, proporciona una función para actualizar currentPage \r\n    cuando se selecciona una página diferente.\r\n     */\r\n    //--------------------------\r\n    /*\r\n    En el componente Home, se utiliza el estado search \r\n    y la función setSearch para controlar el valor del campo de búsqueda. \r\n    La inicialización del estado search es un objeto con una propiedad \r\n    name inicializada en una cadena vacía.\r\n     */\r\n    const [search, setSearch] = useState({ //input de busqueda\r\n        name: '',\r\n    });\r\n\r\n    /*\r\n    Esta función se ejecuta cuando se realiza una selección \r\n    en el menú desplegable de orden alfabético. \r\n    Primero, llama a e.preventDefault() \r\n    para evitar que se realice la acción predeterminada del evento. \r\n    Luego, despacha la acción orderAlphabetically con el valor \r\n    seleccionado (e.target.value) utilizando dispatch. \r\n    A continuación, se establece currentPage en 1 \r\n    y se actualiza el conjunto de resultados actuales \r\n    (setCurrent) \r\n    mediante el uso de allVideogames.slice(indexOfFirstVideoGame, indexOfLastVideoGame)\r\n     */\r\n    const handleOrderAlphabetically = (e) => {\r\n        e.preventDefault()\r\n        dispatch(orderAlphabetically(e.target.value))\r\n        setCurrentPage(1)\r\n        setCurrent(\r\n            allVideogames.slice(indexOfFirstVideoGame, indexOfLastVideoGame)\r\n        )\r\n    }\r\n    //mismo procedimiento diferente action\r\n    const handleOrderRating = (e) => {\r\n        e.preventDefault()\r\n        dispatch(orderByRating(e.target.value))\r\n        setCurrentPage(1)\r\n        setCurrent(\r\n            allVideogames.slice(indexOfFirstVideoGame, indexOfLastVideoGame)\r\n        )\r\n    }\r\n    // mismo procedimiento diferente action\r\n    const handleFilterGenres = (e) => {\r\n        e.preventDefault()\r\n        dispatch(filterByGenres(e.target.value))\r\n        setCurrentPage(1)\r\n        setCurrent(\r\n            allVideogames.slice(indexOfFirstVideoGame, indexOfLastVideoGame)\r\n        )\r\n    }\r\n    //mismo procedimiento diferente action \r\n    const handleGetVideoGamesByOrigin = (e) => {\r\n        e.preventDefault()\r\n        dispatch(getVideoGamesByOrigin(e.target.value));\r\n        setCurrentPage(1)\r\n        // setCurrent(\r\n        //     getAllVideogames.slice(indexOfFirstVideoGame, indexOfLastVideoGame)\r\n        // )\r\n    }\r\n    /*\r\n    Esta función se ejecuta cuando \r\n    se realiza un cambio en el campo de búsqueda.\r\n    Evita la acción predeterminada del evento, \r\n    actualiza el estado search utilizando la función \r\n    setSearch con el nuevo valor del campo de búsqueda \r\n    y despacha la acción getVideogameByName \r\n    con el valor actualizado de search.name. Además, \r\n    establece currentPage en 1.\r\n     */\r\n    const handleChange = (e) => {\r\n        e.preventDefault()\r\n        setSearch({\r\n            ...search,\r\n            [e.target.name]: e.target.value,\r\n        })\r\n        dispatch(getVideogameByName(search.name))\r\n        setCurrentPage(1)\r\n        // setCurrent(\r\n        //     getAllVideogames.slice(indexOfFirstVideoGame, indexOfLastVideoGame)\r\n        // )\r\n    }\r\n    // es practicamente lo que pasa arriba solo que al hacer click al boton\r\n    const handleSearch = (e) => { //se ejecuta cuando clickeo boton 'go!'\r\n        e.preventDefault();\r\n        dispatch(getVideogameByName(search.name))\r\n        setCurrentPage(1)\r\n        // setCurrent(\r\n        //     getAllVideogames.slice(indexOfFirstVideoGame, indexOfLastVideoGame)\r\n        // )\r\n    }\r\n    //practicamente limpia el filtrado y reinicia el componente\r\n    const handleClearFilters = (e) => {\r\n        console.log(\"Before clearing states:\", allVideogames, currentPage);\r\n        dispatch(deleteStates())\r\n        console.log(\"After clearing states:\", allVideogames, currentPage);\r\n    }\r\n\r\n    // sytles\r\n    const { backgroundImage, containerCard, containerLoading, searchBar, select, searchGame, searchBtn, createGame, refresh } = styles;\r\n    return (\r\n        <>\r\n            <div className={backgroundImage}>\r\n                <nav className={searchBar}>\r\n\r\n                    <select className={select} onChange={(e) => { handleOrderAlphabetically(e) }}>\r\n                        <option>Order</option>\r\n                        <option value=\"asc\">A-Z</option>\r\n                        <option value=\"desc\">Z-A</option>\r\n                    </select>\r\n\r\n                    <select className={select} onChange={(e) => handleOrderRating(e)}>\r\n                        <option>Rating</option>\r\n                        <option value=\"max\">More Popular</option>\r\n                        <option value=\"min\">Less popular</option>\r\n                    </select>\r\n\r\n                    <select className={select} onChange={(e) => handleFilterGenres(e)} defaultValue={'default'}>\r\n                        <option value=\"default\" disabled>Genres</option>\r\n                        {genres?.map((el, i) => {\r\n                            return (\r\n                                <option key={i} value={el}>\r\n                                    {el}\r\n                                </option>\r\n                            )\r\n                        })\r\n                        }\r\n                    </select>\r\n\r\n                    <select className={select} onChange={(e) => { handleGetVideoGamesByOrigin(e) }}>\r\n                        <option>Filter</option>\r\n                        <option value=\"All\">All Games</option>\r\n                        <option value=\"Created\">My Games</option>\r\n                        <option value=\"From Api\">Api Games</option>\r\n                    </select>\r\n\r\n                    <button className={refresh} onClick={e => handleClearFilters(e)}>Refresh</button>\r\n\r\n                    <Link to=\"/createGame\">\r\n                        <button className={createGame}>Create VideoGame</button>\r\n                    </Link>\r\n                </nav>\r\n                <div>\r\n                    <input className={searchGame}\r\n                        autoComplete=\"off\"\r\n                        type=\"text\"\r\n                        placeholder=\"Search Videgame...\"\r\n                        name='name'\r\n                        value={search.name}\r\n                        onChange={(e) => handleChange(e)}\r\n                    />\r\n                    <button className={searchBtn} onClick={(e) => handleSearch(e)}>Search</button>\r\n                </div>\r\n                <div style={{ marginTop: \"80\" }}>\r\n                    <div className={containerCard}>\r\n\r\n                        {current.length > 0 ? current.map(el => {\r\n                            return (\r\n                                <Link key={el.id} to={`/videogame/${el.id}`}>\r\n                                    <Card\r\n                                        name={el.name}\r\n                                        img={el.createdInDb ? el.image : el.img}\r\n                                        genres={el.createdInDb ?\r\n                                            el.genres.map((el) => el.name).join(' ') :\r\n                                            el.genres.join(' - ')\r\n                                        }\r\n                                    />\r\n                                </Link>\r\n                            )\r\n                        }) :\r\n                            <div className={containerLoading}>\r\n                                <Loading />\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <Paged\r\n                    videoGamesPP={videoGamesPP}\r\n                    allVideoGames={allVideogames.length}\r\n                    paged={paged}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\nexport default Home;","import React, { useEffect } from 'react';\r\n/*\r\nImporta las funciones useDispatch y useSelector de la biblioteca \r\nreact-redux. \r\nEstas funciones se utilizan para conectar el componente \r\ncon el store de Redux y acceder al estado y despachar acciones.\r\n */\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n/*\r\nImporta la función useHistory de la biblioteca react-router-dom. \r\nEsta función se utiliza para acceder al objeto history \r\ny redireccionar a rutas diferentes.\r\n */\r\nimport { useHistory } from 'react-router-dom';\r\nimport styles from './styles/Details.module.css'\r\n//import { Link } from 'react-router-dom'\r\n\r\n/*\r\nImporta las acciones getDetailVideoGame y deleteVideoGame \r\ndesde el archivo index.js ubicado en la carpeta actions. \r\nEstas acciones son utilizadas para \r\nobtener los detalles de un videojuego y eliminar un videojuego respectivamente.\r\n */\r\nimport { getDetailVideoGame, deleteVideoGame } from '../actions/index.js';\r\n\r\n\r\n/*\r\nDefine el componente Details como una función de flecha \r\nque recibe props como argumento. \r\nLas props contienen los datos que se pasan al componente \r\ndesde su componente padre.\r\n */\r\nconst Details = (props) => {\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    /*\r\n    Crea una variable detailVideoGame utilizando la función \r\n    useSelector para acceder al estado details del store de Redux. \r\n    Esto permite obtener los detalles del videojuego seleccionado.\r\n    */\r\n    const detailVideoGame = useSelector((state) => state.details);\r\n\r\n    /*\r\n    Utiliza el hook useEffect para ejecutar un efecto secundario \r\n    cuando el componente se monta o cuando cambia el valor de \r\n    props.match.params.id.\r\n    El efecto secundario llama a la acción getDetailVideoGame \r\n    utilizando dispatch para obtener los detalles del \r\n    videojuego con el ID proporcionado en props.match.params.id.\r\n     */\r\n    useEffect(() => {\r\n        dispatch(getDetailVideoGame(props.match.params.id))\r\n    }, [dispatch, props.match.params.id])\r\n\r\n\r\n    /*\r\n    Define una función handleDeleteGame que se ejecuta cuando \r\n    se hace clic en el botón \"Delete game\".\r\n    Esta función muestra un mensaje de confirmación y, \r\n    si el usuario confirma, \r\n    envía la acción deleteVideoGame utilizando dispatch \r\n    para eliminar el videojuego con el ID proporcionado \r\n    en props.match.params.id.\r\n    Luego redirecciona al usuario a la página de inicio \r\n    y actualiza la página.\r\n     */\r\n    const handleDeleteGame = (e) => {\r\n        e.preventDefault()\r\n        let resultado = window.confirm('Estas seguro que desea eliminar este juego?');\r\n        if (resultado === true) {\r\n            window.alert('Juego borrado con éxito');\r\n            dispatch(deleteVideoGame(props.match.params.id));\r\n            history.push(`/home`);\r\n            window.location.replace('');\r\n        }\r\n\r\n    }\r\n\r\n    const { backgroundImage, containerDetails, deleteGame } = styles\r\n\r\n\r\n    /*\r\n    Utiliza una expresión condicional para renderizar \r\n    diferentes elementos según el valor de detailVideoGame.createdInDb.\r\n    Si createdInDb es true, \r\n    renderiza los detalles del videojuego desde el objeto \r\n    detailVideoGame obtenido del estado.\r\n     */\r\n\r\n    return (\r\n        <div className={backgroundImage}>\r\n            {detailVideoGame.createdInDb === true\r\n                ?\r\n                <div className={containerDetails}>\r\n                    <h1>\r\n                        {detailVideoGame?.name}\r\n                    </h1>\r\n                    <img\r\n                        src={detailVideoGame?.image}\r\n                        alt='imagen'\r\n                    />\r\n                    <h4>Released at: {(detailVideoGame?.releaseDate).slice(0, 10)}</h4>\r\n                    <h4>Rating: {detailVideoGame?.rating}</h4>\r\n                    <h4>Description:\r\n                        <p dangerouslySetInnerHTML={{ __html: detailVideoGame?.description }}></p>\r\n                    </h4>\r\n                    <h3>Platforms: {detailVideoGame.platforms?.map(el => el).join(' - ')}</h3>\r\n                    <h3>\r\n                        Genres: {detailVideoGame.genres?.map(el => el.name).join(' - ')}\r\n                    </h3>\r\n                {/*// <Link to={`/editVideoGame/${detailVideoGame.id}`}>\r\n                       // <button>Modify...</button>\r\n                        </Link> */}\r\n\r\n\r\n\r\n                    <button className={deleteGame} onClick={(e) => handleDeleteGame(e)}>Delete game</button>\r\n                </div>\r\n                :\r\n                <div className={containerDetails}>\r\n                    <h1>\r\n                        {detailVideoGame?.name}\r\n                    </h1>\r\n                    <img\r\n                        src={detailVideoGame?.img}\r\n                        alt='imagen'\r\n                    />\r\n                    <h4>Released at: {detailVideoGame?.released}</h4>\r\n                    <h4>Rating: {detailVideoGame?.rating}</h4>\r\n                    <p dangerouslySetInnerHTML={{ __html: detailVideoGame?.description }}></p>\r\n                    <h3>Platforms: {detailVideoGame.platforms?.map(el => el).join(' - ')}</h3>\r\n                    <h3>Genres: {detailVideoGame.genres?.map(el => el).join(' - ')}</h3>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Details;","import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getGenres, createVideoGame } from '../actions/index.js'\r\nimport styles from './styles/CreateGame.module.css';\r\n\r\n// me traigo las platforms 1 a 1 por que el endpoint de /platforms\r\n// no esta permitido\r\nconst CreateGame = () => {\r\n  const dispatch = useDispatch();\r\n  const genres = useSelector((state) => state.genres);\r\n  const platforms =\r\n    [\r\n      \"PC\",\r\n      \"PlayStation 5\",\r\n      \"Xbox One\",\r\n      \"PlayStation 4\",\r\n      \"Xbox Series S/X\",\r\n      \"Nintendo Switch\",\r\n      \"iOS\",\r\n      \"Android\",\r\n      \"Nintendo 3DS\",\r\n      \"Nintendo DS\",\r\n      \"Nintendo DSi\",\r\n      \"macOS\",\r\n      \"Linux\",\r\n      \"Xbox 360\",\r\n      \"Xbox\",\r\n      \"PlayStation 3\",\r\n      \"PlayStation 2\",\r\n      \"PlayStation\",\r\n      \"PS Vita\",\r\n      \"PSP\",\r\n      \"Wii U\",\r\n      \"Wii\",\r\n      \"GameCube\",\r\n      \"Nintendo 64\",\r\n      \"Game Boy Advance\",\r\n      \"Game Boy Color\",\r\n      \"Game Boy\",\r\n      \"SNES\",\r\n      \"NES\",\r\n      \"Classic Macintosh\",\r\n      \"Apple II\",\r\n      \"Commodore / Amiga\",\r\n      \"Atari 7800\",\r\n      \"Atari 5200\",\r\n      \"Atari 2600\",\r\n      \"Atari Flashback\",\r\n      \"Atari 8-bit\",\r\n      \"Atari ST\",\r\n      \"Atari Lynx\",\r\n      \"Atari XEGS\",\r\n      \"Genesis\",\r\n      \"SEGA Saturn\",\r\n      \"SEGA CD\",\r\n      \"SEGA 32X\",\r\n      \"SEGA Master System\",\r\n      \"Dreamcast\",\r\n      \"3DO\",\r\n      \"Jaguar\",\r\n      \"Game Gear\",\r\n      \"Neo Geo\"\r\n    ];\r\n\r\n    /*\r\n    En este caso, se utiliza para llamar a la acción getGenres \r\n    cuando el componente se monta. \r\n    La acción getGenres se dispara mediante dispatch, \r\n    que es una función proporcionada por Redux \r\n    para enviar acciones al store. \r\n    El [dispatch] en el segundo argumento del useEffect \r\n    indica que este efecto se activará \r\n    solo cuando la referencia de dispatch cambie.\r\n     */\r\n  useEffect(() => {\r\n    dispatch(getGenres()); //recibe la accion\r\n  }, [dispatch]);\r\n\r\n  // El estado errors se utiliza para almacenar los errores de validación o cualquier otro tipo de error relacionado con el formulario.\r\n  const [errors, setErrors] = useState({});\r\n\r\n  /*\r\n  El estado values se utiliza para almacenar los valores ingresados \r\n  ​​por el usuario en el formulario. \r\n  Los valores iniciales proporcionados son para los campos \r\n  name, image, description, released, rating, platforms y genres. \r\n  Estos campos representan las propiedades de un juego que se está creando.\r\n   */\r\n  const [values, setValues] = useState({\r\n    name: '',\r\n    image: '',\r\n    description: '',\r\n    released: '',\r\n    rating: 0,\r\n    platforms: [],\r\n    genres: [],\r\n  })\r\n\r\n  //!------------VALIDACIONES/ERRORS ------------------\r\n  /*\r\n  Esta función se utiliza para realizar validaciones en los valores del formulario \r\n  y devuelve un objeto errors que contiene los mensajes de error correspondientes.\r\n   */\r\n  const validators = (values) => {\r\n    let errors = {};\r\n    if (!values.name || (/^[a-zA-Z ]{1,3}$/).test(values.name)) {\r\n      errors.name = '*Please enter the name of the game, must be at least 3 characters long';\r\n    }\r\n    if (!values.description) {\r\n      errors.description = '* Please enter the videogame description. (Max 100 characters)'\r\n    }\r\n    if (!values.rating || values.rating === '0') {\r\n      errors.rating = \"Please insert a number between 0.5 and 5\"\r\n    }\r\n    if (!values.released) {\r\n      errors.released = \"Please insert a date\"\r\n    }\r\n    if (values.platforms.length === 0) {\r\n      errors.platforms = '*Please select at least one platform'\r\n    }\r\n    if (!values.genres) {\r\n      errors.genres = '*Please select at least one genre'\r\n    }\r\n    return errors\r\n  }\r\n\r\n  const handleChange = (e) => { //cuando hay un cambio se dispara esta funcion con un e\r\n    e.preventDefault()\r\n    /*\r\n    Esto actualiza el estado values del formulario. \r\n    Utiliza la sintaxis de propagación (...values) \r\n    para mantener los valores existentes\r\n    y luego actualiza el campo específico ([e.target.name]) \r\n    con el nuevo valor (e.target.value). \r\n    Esto asegura que los valores del formulario se mantengan actualizados \r\n    con cada cambio realizado por el usuario.\r\n     */\r\n    setValues({\r\n      ...values,\r\n      [e.target.name]: e.target.value\r\n    });\r\n    /*\r\n    Esto actualiza el estado errors del formulario. \r\n    Utiliza la función validators para validar los nuevos valores del formulario, \r\n    incluido el campo específico que se modificó ([e.target.name]: e.target.value). \r\n    Esto actualiza los mensajes de error en función de los nuevos valores del formulario.\r\n     */\r\n    setErrors(\r\n      validators({\r\n        ...values,\r\n        [e.target.name]: e.target.value,\r\n      })\r\n    );\r\n  }\r\n  /*\r\n  Esto permite mantener el formulario actualizado \r\n  y validar los cambios realizados por el usuario en tiempo real.\r\n   */\r\n  //-------------------------------------------------------SUBMIT----------------------------------------------------------\r\n  const handleSubmit = (e) => { //se ejecuta cuando envío un formulario.\r\n    e.preventDefault();\r\n    if (values.image === null || values.image === '') {\r\n      values.image = 'https://media.rawg.io/media/games/53f/53f65f1a0988374c18b5ee3dddbf0399.jpg'\r\n    }\r\n    if (!values.name ||\r\n      !values.description ||\r\n      !values.rating ||\r\n      !values.released ||\r\n      !values.platforms ||\r\n      !values.genres\r\n    ) {\r\n      alert(\"Missing Data to send Form\")\r\n    }\r\n    else {\r\n      /*\r\n      Se envía una acción al store para crear el videojuego utilizando los valores \r\n      del formulario. \r\n      El método createVideoGame  es una acción que realiza la llamada a la API \r\n      o realiza cualquier otra lógica necesaria para crear el videojuego.\r\n      alert('Videogame Created'): Se muestra una alerta indicando que \r\n      el videojuego se ha creado exitosamente.\r\n      setValues({ ... }): Se restablecen los valores del formulario a su estado inicial, \r\n      es decir, se vacían los campos.\r\n       */\r\n      dispatch(createVideoGame(values));\r\n      alert('Videogame Created');\r\n      setValues({\r\n        name: '',\r\n        image: '',\r\n        description: '',\r\n        released: '',\r\n        rating: 0,\r\n        platforms: [],\r\n        genres: [],\r\n      });\r\n    }\r\n  }\r\n\r\n  const handleChangePlatform = (e) => {\r\n    if (values.platforms.includes(e.target.value)) {\r\n      alert('This platform has already been selected.Please choose another')\r\n    } else {\r\n      setValues(\r\n        /*\r\n        Se usa una función de actualización del estado ((state) => ({ ...state, ... })) \r\n        para garantizar que se preserve el valor anterior del estado \r\n        y solo se actualice la propiedad platforms. \r\n        Se agrega el nuevo valor seleccionado a platforms utilizando \r\n        la sintaxis de propagación (...state.platforms) \r\n        y se incluye el nuevo valor (e.target.value) al final del array.\r\n         */\r\n        (state) => ({\r\n          ...state,\r\n          platforms: [...state.platforms, e.target.value],\r\n        })\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n    /*\r\n    La función recibe el evento (e) y el valor de la plataforma (p) \r\n    que se desea eliminar.\r\n    Se utiliza e.preventDefault() para evitar que el evento provoque \r\n    un comportamiento predeterminado, como la recarga de la página.\r\n    Luego, se llama a setValues para actualizar el estado values. \r\n    Se utiliza el operador de propagación (...values) \r\n    para copiar todos los valores existentes en values y luego se \r\n    filtran las plataformas para eliminar la plataforma específica que se desea eliminar. \r\n    Esto se hace utilizando el método filter y se compara cada elemento del array \r\n    values.platforms (el) con la plataforma a eliminar (p). \r\n    Los elementos que no coinciden se mantienen en el array resultante, \r\n    eliminando así la plataforma seleccionada.\r\n     */\r\n\r\n    /*\r\n    En la función handleDeletePlatform, se utiliza el método filter para crear \r\n    un nuevo array que contiene solo las plataformas que son diferentes \r\n    a la plataforma específica que se desea eliminar.\r\n\r\n    El parámetro (el) en la función de filtro representa \r\n    cada elemento del array values.platforms. \r\n    Al compararlo con la plataforma específica que se desea eliminar (p), \r\n    se verifica si el elemento actual es igual a la plataforma que se desea eliminar. \r\n    Si el elemento es diferente, se mantiene en el nuevo array resultante; \r\n    si el elemento es igual a la plataforma que se desea eliminar, \r\n    se excluye del nuevo array.\r\n\r\n    En resumen, el filtro (el) => el !== p \r\n    se encarga de verificar si cada elemento del array values.platforms \r\n    es diferente a la plataforma específica que se desea eliminar (p). \r\n    Si el elemento es diferente, se mantiene en el nuevo array filtrado; \r\n    si el elemento es igual, se excluye del nuevo array. \r\n    De esta manera, se logra eliminar la plataforma seleccionada del estado values.platforms.\r\n     */\r\n  const handleDeletePlatform = (e, p) => {\r\n    e.preventDefault();\r\n    setValues({\r\n      ...values,\r\n      platforms: values.platforms.filter((el) => el !== p)\r\n    })\r\n  }\r\n\r\n  /*\r\n  La función handleChangeGenre se ejecuta cuando se selecciona un nuevo género \r\n  en el formulario. \r\n  Comienza verificando si el género seleccionado ya está presente en el array values.genres. \r\n  Si es así, muestra una alerta indicando que ese género ya ha sido seleccionado \r\n  y se debe elegir otro. De lo contrario, \r\n  utiliza la función setValues para actualizar el estado de values. \r\n  Utiliza el enfoque de función en setValues, \r\n  pasando una función de devolución de llamada que recibe el estado anterior \r\n  (state) y devuelve un nuevo objeto que fusiona todas las propiedades anteriores \r\n  y agrega el nuevo género seleccionado al array genres.\r\n   */\r\n  const handleChangeGenre = (e) => {\r\n    if (values.genres.includes(e.target.value)) {\r\n      alert('This genre has already been selected.Please choose another')\r\n    } else {\r\n      setValues(\r\n        (state) => ({\r\n          ...state,\r\n          genres: [...state.genres, e.target.value],\r\n        })\r\n      )\r\n    }\r\n  }\r\n\r\n  /* se activa cuando se hace clic en el botón de eliminar género. \r\n  Al igual que en handleDeletePlatform, \r\n  se utiliza e.preventDefault() para evitar que se recargue la página. \r\n  Luego, se utiliza la función setValues para actualizar el estado de values.\r\n  Al igual que antes, se utiliza el enfoque de función en setValues \r\n  y se proporciona una función de devolución de llamada que recibe el estado anterior (prev).\r\n  Dentro de esta función de devolución de llamada, \r\n  se utiliza prev.genres.filter((el) => el !== g) para crear un nuevo array de géneros \r\n  que excluya el género específico (g) que se desea eliminar.\r\n   */\r\n  const handleDeleteGenre = (e, g) => {\r\n    e.preventDefault();\r\n    setValues((prev) => ({\r\n      ...prev,\r\n      genres:\r\n        prev.genres.filter((el) => el !== g)\r\n    }))\r\n  }\r\n\r\n  const { container, inputForm, backgroundImage, raiting, nameCss, deleteBtn, createGameBtn } = styles;\r\n\r\n\r\n  return (\r\n    <div className={backgroundImage}>\r\n      <div className={container} >\r\n        <h1>Create VideoGame</h1>\r\n        <h4>Fill in the following form:</h4>\r\n        <form autoComplete=\"off\" onSubmit={(e) => handleSubmit(e)}>\r\n          {/* --------------------------------------NAME---------------------------------------- */}\r\n          <div className={nameCss}>\r\n            <h5>Name of the VideoGame:</h5>\r\n            <input\r\n              className={errors.name && 'danger'}\r\n              type='text'\r\n              placeholder='Name...'\r\n              name='name' // nombre del input\r\n              value={values.name} // valor dinámico del input que se actualiza mientras se escribe dentro del mismo\r\n              onChange={(e) => handleChange(e)} // onChange es un \"detector\" que dispara un \"algo/evento\" cuando detecta un cambio\r\n            />\r\n            {errors.name && (\r\n              <p className={errors.name && 'danger'}>{errors.name}</p>\r\n            )}\r\n          </div>\r\n          {/* --------------------------------------IMAGE---------------------------------------- */}\r\n          <div>\r\n            <h5>Put the cover of the game:</h5>\r\n            <input\r\n              className={inputForm}\r\n              type='text'\r\n              placeholder='Image Url...'\r\n              name='image'\r\n              value={values.image}\r\n              onChange={(e) => handleChange(e)}\r\n            />\r\n          </div>\r\n          {/* --------------------------------------DESCRIPTION---------------------------------------- */}\r\n          <div>\r\n            <h5>Game description:</h5>\r\n            <input\r\n              className={errors.description && 'danger'}\r\n              type='text'\r\n              placeholder='Description...'\r\n              name='description'\r\n              maxLength='100'\r\n              value={values.description}\r\n              onChange={(e) => handleChange(e)}\r\n            />\r\n            {errors.description && (\r\n              <p className={errors.description && 'danger'}>{errors.description}</p>\r\n            )}\r\n          </div>\r\n          {/* --------------------------------------RELEASED---------------------------------------- */}\r\n          <div>\r\n            <h5>Release date:</h5>\r\n            <input\r\n              type='date'\r\n              placeholder='Date...'\r\n              name=\"released\"\r\n              value={values.released}\r\n              onChange={(e) => handleChange(e)}\r\n            />\r\n            {errors.released && (\r\n              <p className={errors.released && 'danger'}>{errors.released}</p>\r\n            )}\r\n          </div>\r\n          {/* --------------------------------------RATING---------------------------------------- */}\r\n          <div className={raiting}>\r\n            <h5>Raiting:</h5>\r\n            <input\r\n              className={errors.rating && 'danger'}\r\n              type=\"number\"\r\n              placeholder=\"Rating...\"\r\n              value={values.rating}\r\n              name=\"rating\"\r\n              step={0.5}\r\n              max={5.0}\r\n              min={0.0}\r\n              onChange={(e) => {\r\n                handleChange(e);\r\n              }}\r\n            />\r\n            {errors.rating && (\r\n              <p className={errors.rating && 'danger'}>{errors.rating}</p>\r\n            )}\r\n          </div>\r\n          {/* --------------------------------------PLATFORMS---------------------------------------- */}\r\n          <div>\r\n            <label >\r\n              <h5 > Choose a platform...</h5>\r\n              <select\r\n                // className={errors.platforms && 'danger'}\r\n                name='Platforms'\r\n                onChange={(e) => handleChangePlatform(e)}\r\n                defaultValue={'default'}\r\n              >\r\n                {<option value=\"default\" disabled>Platforms...</option>}\r\n                {platforms.map((el, i) => {\r\n                  return (\r\n                    <option key={i} value={el}>\r\n                      {el}\r\n                    </option>\r\n                  )\r\n                })}\r\n              </select>\r\n            </label>\r\n            {/* ----------------------------------------PLATFORMS LIST----------------------------------- */}\r\n            <ul >\r\n              {values.platforms.length ? values.platforms.map((el, i) => (\r\n                <div className='result' key={i}>\r\n                  <li>\r\n                    {el}\r\n                    <button className={deleteBtn} onClick={(e) => { handleDeletePlatform(e, el) }}>x</button>\r\n                  </li>\r\n                </div>\r\n              ))\r\n                : errors.platforms && (\r\n                  <p className={errors.platforms && 'danger'}>{errors.platforms}</p>\r\n                )\r\n              }\r\n            </ul>\r\n          </div>\r\n          {/* -----------------------------------------GENRES---------------------------------------- */}\r\n          <div>\r\n            <label>\r\n              <h5 className={errors.genres && 'danger'} > Choose a genre...</h5>\r\n              <select onChange={(e) => handleChangeGenre(e)}\r\n                className='Genres'\r\n                name='Genres'\r\n                defaultValue={'default'}\r\n              >\r\n                <option value=\"default\" disabled>Genres...</option>\r\n                {genres?.map((el, i) => {\r\n                  return (\r\n                    <option key={i} value={el}>\r\n                      {el}\r\n                    </option>\r\n                  )\r\n                })\r\n                }\r\n              </select>\r\n            </label>\r\n            {/* ----------------------------------------GENRES LIST----------------------------------- */}\r\n            <ul className='lista'>\r\n              {values.genres.length ? values.genres.map((el, i) => (\r\n                <div className='result' key={i}>\r\n                  <li>\r\n                    {el}\r\n                    <button className={deleteBtn} onClick={(e) => { handleDeleteGenre(e, el) }}>x</button>\r\n                  </li>\r\n                </div>)\r\n              ) :\r\n                errors.platforms && (\r\n                  <p className={errors.platforms && 'danger'}>{errors.platforms}</p>\r\n                )\r\n              }\r\n            </ul>\r\n          </div>\r\n          <button className={createGameBtn} type='submit'>Create Videogame</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default CreateGame\r\n","import React, { useEffect, useState } from 'react'\r\nimport { getDetailVideoGame, getGenres } from '../actions/index.js'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n// import styles from './styles/Details.module.css'\r\n\r\n\r\nconst EditVideoGame = (props) => {\r\n    const dispatch = useDispatch();\r\n    const genres = useSelector((state) => state.genres);\r\n    const detailVideoGame = useSelector((state) => state.details);\r\n    const platforms =\r\n        [\r\n            \"PC\",\r\n            \"PlayStation 5\",\r\n            \"Xbox One\",\r\n            \"PlayStation 4\",\r\n            \"Xbox Series S/X\",\r\n            \"Nintendo Switch\",\r\n            \"iOS\",\r\n            \"Android\",\r\n            \"Nintendo 3DS\",\r\n            \"Nintendo DS\",\r\n            \"Nintendo DSi\",\r\n            \"macOS\",\r\n            \"Linux\",\r\n            \"Xbox 360\",\r\n            \"Xbox\",\r\n            \"PlayStation 3\",\r\n            \"PlayStation 2\",\r\n            \"PlayStation\",\r\n            \"PS Vita\",\r\n            \"PSP\",\r\n            \"Wii U\",\r\n            \"Wii\",\r\n            \"GameCube\",\r\n            \"Nintendo 64\",\r\n            \"Game Boy Advance\",\r\n            \"Game Boy Color\",\r\n            \"Game Boy\",\r\n            \"SNES\",\r\n            \"NES\",\r\n            \"Classic Macintosh\",\r\n            \"Apple II\",\r\n            \"Commodore / Amiga\",\r\n            \"Atari 7800\",\r\n            \"Atari 5200\",\r\n            \"Atari 2600\",\r\n            \"Atari Flashback\",\r\n            \"Atari 8-bit\",\r\n            \"Atari ST\",\r\n            \"Atari Lynx\",\r\n            \"Atari XEGS\",\r\n            \"Genesis\",\r\n            \"SEGA Saturn\",\r\n            \"SEGA CD\",\r\n            \"SEGA 32X\",\r\n            \"SEGA Master System\",\r\n            \"Dreamcast\",\r\n            \"3DO\",\r\n            \"Jaguar\",\r\n            \"Game Gear\",\r\n            \"Neo Geo\"\r\n        ];\r\n        const [values,setValues] = useState({\r\n            name: '',\r\n    image: '',\r\n    description: '',\r\n    released: '',\r\n    rating: 0,\r\n    platforms: [],\r\n    genres: [],\r\n        })\r\n        const [errors,] = useState({});\r\n\r\n        useEffect(() => {\r\n            dispatch(getGenres());\r\n            dispatch(getDetailVideoGame(props.match.params.id));\r\n          }, [dispatch, props.match.params.id]);\r\n        \r\n          useEffect(() => {\r\n            if (detailVideoGame) {\r\n              setValues({\r\n                name: detailVideoGame.name || '',\r\n                image: detailVideoGame.image || '',\r\n                description: detailVideoGame.description || '',\r\n                released: detailVideoGame.released || '',\r\n                rating: detailVideoGame.rating || 0,\r\n                platforms: detailVideoGame.platforms || [],\r\n                genres: detailVideoGame.genres || [],\r\n              });\r\n            }\r\n          }, [detailVideoGame]);\r\n        \r\n\r\n    //HANDLES-------------------------\r\n    const handleChangePlatform = (e) => {\r\n        if (values.platforms.includes(e.target.value)) {\r\n            alert('This platform has already been selected.Please choose another')\r\n        } else {\r\n            setValues(\r\n                (state) => ({\r\n                    ...state,\r\n                    platforms: [...state.platforms, e.target.value],\r\n                })\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    const handleDeletePlatform = (e, p) => {\r\n        e.preventDefault();\r\n        setValues({\r\n            ...values,\r\n            platforms: values.platforms.filter((el) => el !== p)\r\n        })\r\n    }\r\n\r\n    const handleChangeGenre = (e) => {\r\n        if (values.genres.includes(e.target.value)) {\r\n            alert('This genre has already been selected.Please choose another')\r\n        } else {\r\n            setValues(\r\n                (state) => ({\r\n                    ...state,\r\n                    genres: [...state.genres, e.target.value],\r\n                })\r\n            )\r\n        }\r\n    }\r\n\r\n    const handleDeleteGenre = (e, g) => {\r\n        e.preventDefault();\r\n        setValues((prev) => ({\r\n            ...prev,\r\n            genres:\r\n                prev.genres.filter((el) => el !== g)\r\n        }))\r\n    }\r\n\r\n    const handleChange = (e) => { //cuando hay un cambio se dispara esta funcion con un e\r\n        e.preventDefault()\r\n        setValues({\r\n            ...values,\r\n            [e.target.name]: e.target.value\r\n        });\r\n        // setErrors(\r\n        //   validators({\r\n        //     ...values,\r\n        //     [e.target.name]: e.target.value,\r\n        //   })\r\n        // );\r\n    }\r\n\r\n    const handleSubmit = (e) => { //se ejecuta cuando envío un formulario.\r\n        e.preventDefault();\r\n        if (values.image === null || values.image === '') {\r\n            values.image = 'https://media.rawg.io/media/games/53f/53f65f1a0988374c18b5ee3dddbf0399.jpg'\r\n        }\r\n        if (!values.name ||\r\n            !values.description ||\r\n            !values.rating ||\r\n            !values.released ||\r\n            !values.platforms ||\r\n            !values.genres\r\n        ) {\r\n            alert(\"Missing Data to send Form\")\r\n        }\r\n        else {\r\n            //   dispatch(createVideoGame(values));\r\n            alert('Videogame Created');\r\n            setValues({\r\n                name: '',\r\n                image: '',\r\n                description: '',\r\n                released: '',\r\n                rating: 0,\r\n                platforms: [],\r\n                genres: [],\r\n            });\r\n        }\r\n    }\r\n    //---------------------------------\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <h1>Create your VideoGame</h1>\r\n                <h5>Fill in the following form:</h5>\r\n                <form\r\n                    autoComplete=\"off\"\r\n                    onSubmit={(e) => handleSubmit(e)}\r\n                >\r\n                    {/* --------------------------------------NAME---------------------------------------- */}\r\n                    <div>\r\n                        <input\r\n                            // className={errors.name && 'danger'}\r\n                            type='text'\r\n                            placeholder='Videogame Name...'\r\n                            name='name' // nombre del input\r\n                            value={values.name && values.name} // valor dinámico del input que se actualiza mientras se escribe dentro del mismo\r\n                            onChange={(e) => handleChange(e)} // onChange es un \"detector\" que dispara un \"algo/evento\" cuando detecta un cambio\r\n                        />\r\n                        {/* {errors.name && (\r\n            <p className={errors.name && 'danger'}>{errors.name}</p>\r\n          )} */}\r\n                    </div>\r\n                    {/* --------------------------------------IMAGE---------------------------------------- */}\r\n                    <div>\r\n                        <input\r\n                            // className={inputForm}\r\n                            type='text'\r\n                            placeholder='Image Url...'\r\n                            name='image'\r\n                            value={values.image}\r\n                            onChange={(e) => handleChange(e)}\r\n                        />\r\n                    </div>\r\n                    {/* --------------------------------------DESCRIPTION---------------------------------------- */}\r\n                    <div>\r\n                        <input\r\n                            // className={errors.description && 'danger'}\r\n                            type='text'\r\n                            placeholder='Description...'\r\n                            name='description'\r\n                            maxLength='100'\r\n                            value={values.description}\r\n                            onChange={(e) => handleChange(e)}\r\n                        />\r\n                        {/* {errors.description && (\r\n            <p className={errors.description && 'danger'}>{errors.description}</p>\r\n          )} */}\r\n                    </div>\r\n                    {/* --------------------------------------RELEASED---------------------------------------- */}\r\n                    <div>\r\n                        <input\r\n                            type='date'\r\n                            placeholder='Date...'\r\n                            name=\"released\"\r\n                            value={values.released}\r\n                            onChange={(e) => handleChange(e)}\r\n                        />\r\n                        {/* {errors.released && (\r\n            <p className={errors.released && 'danger'}>{errors.released}</p>\r\n          )} */}\r\n                    </div>\r\n                    {/* --------------------------------------RATING---------------------------------------- */}\r\n                    <div>\r\n                        <input\r\n                            // className={errors.rating && 'danger'}\r\n                            type=\"number\"\r\n                            placeholder=\"Rating...\"\r\n                            value={values.rating}\r\n                            name=\"rating\"\r\n                            step={0.5}\r\n                            max={5.0}\r\n                            min={0.0}\r\n                            onChange={(e) => {\r\n                                handleChange(e);\r\n                            }}\r\n                        />\r\n                        {/* {errors.rating && (\r\n            <p className={errors.rating && 'danger'}>{errors.rating}</p>\r\n          )} */}\r\n                    </div>\r\n                    {/* --------------------------------------PLATFORMS---------------------------------------- */}\r\n                    <div>\r\n                        <label >\r\n                            <h5 > Choose a platform...</h5>\r\n                            <select\r\n                                // className={errors.platforms && 'danger'}\r\n                                name='Platforms'\r\n                                onChange={(e) => handleChangePlatform(e)}\r\n                                defaultValue={'default'}\r\n                            >\r\n                                {<option value=\"default\" disabled>Platforms</option>}\r\n                                {platforms.map((el, i) => {\r\n                                    return (\r\n                                        <option key={i} value={el}>\r\n                                            {el}\r\n                                        </option>\r\n                                    )\r\n                                })}\r\n                            </select>\r\n                        </label>\r\n                        {/* ----------------------------------------PLATFORMS LIST----------------------------------- */}\r\n\r\n                        <ul>\r\n                            {values.platforms && values.platforms.map((el, i) => (\r\n                                <div className='result' key={i}>\r\n                                    <li>\r\n                                        {el}\r\n                                        <button onClick={(e) => { handleDeletePlatform(e, el) }}>x</button>\r\n                                    </li>\r\n                                </div>\r\n                            ))\r\n                                //   : errors.platforms && (\r\n                                //     <p className={errors.platforms && 'danger'}>{errors.platforms}</p>\r\n                                //   )\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                    {/* -----------------------------------------GENRES---------------------------------------- */}\r\n                    <div>\r\n                        <label>\r\n                            <h5 className={errors.genres && 'danger'} > Choose a genre...</h5>\r\n                            <select onChange={(e) => handleChangeGenre(e)}\r\n                                className='Genres'\r\n                                name='Genres'\r\n                                defaultValue={'default'}\r\n                            >\r\n                                <option value=\"default\" disabled>Genres</option>\r\n                                {genres?.map((el, i) => {\r\n                                    return (\r\n                                        <option key={i} value={el}>\r\n                                            {el.name}\r\n                                        </option>\r\n                                    )\r\n                                })\r\n                                }\r\n                            </select>\r\n                        </label>\r\n                        {/* ----------------------------------------GENRES LIST----------------------------------- */}\r\n                        <ul className='lista'>\r\n                            {values.genres && values.genres.map((el, i) => (\r\n                                <div className='result' key={i}>\r\n                                    <li>\r\n                                        {el.name}\r\n                                        <button onClick={(e) => { handleDeleteGenre(e, el) }}>x</button>\r\n                                    </li>\r\n                                </div>)\r\n                            )\r\n                                //  :\r\n                                //   errors.platforms && (\r\n                                //     <p className={errors.platforms && 'danger'}>{errors.platforms}</p>\r\n                                //   )\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                    <button type='submit'>Confirm Changes...</button>\r\n                </form>\r\n            </div>\r\n\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default EditVideoGame\r\n","//Esta es la app en sí misma\n/*\nLa primera línea importa los componentes BrowserRouter, Route, Switch \nde la librería react-router-dom. \nEstos componentes son esenciales \npara la implementación de enrutamiento en una aplicación de React.\n */\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n/*\nLas siguientes líneas importan los componentes específicos \nde la aplicación, como LandingPage, Home, Details, CreateGame y EditVideoGame. \nEstos componentes son los que se utilizarán para renderizar las diferentes vistas de la aplicación.\n */\nimport LandingPage from './components/LandingPage';\nimport Home from './components/Home.jsx';\nimport Details from './components/Details.jsx';\nimport CreateGame from './components/CreateGame';\nimport EditVideoGame from './components/EditVideoGame';\n\n//Aquí se define el componente principal App. Es una función de componente sin estado (stateless).\nconst App = () => {\n  return (\n    /*\n    El componente App envuelve todo el contenido de la aplicación \n    con el componente Router, \n    que establece el contexto del enrutamiento para la aplicación.\n     */\n\n    /*\n    Dentro del div, se encuentra el componente Switch, \n    que se encarga de renderizar solo la primera Route \n    que coincide con la URL actual. \n    Esto evita que se rendericen múltiples rutas al mismo tiempo.\n     */\n\n    /*\n    Dentro del componente Switch, \n    se definen varias Route. \n    Cada Route especifica una ruta de URL \n    y el componente que se debe renderizar \n    cuando esa ruta coincida con la URL actual. \n    Por ejemplo, Route exact path=\"/\" component={LandingPage} \n    indica que cuando la ruta sea exactamente /, \n    se renderizará el componente LandingPage.\n     */\n\n    /*\n    Las rutas como /videogame/:id \n    y /editVideoGame/:id \n    contienen un parámetro :id. \n    Estos son parámetros dinámicos que capturan el valor de id de la URL \n    y lo pasan como una prop a los componentes correspondientes. \n    Por ejemplo, si la URL es /videogame/123, \n    el componente Details recibirá 123 como prop id.\n     */\n    <Router>\n      <div style={{ textAlign: 'center' }}>\n        <Switch>\n          <Route exact path=\"/\" component={LandingPage} />\n          <Route exact path=\"/home\" component={Home} />\n          <Route exact path=\"/videogame/:id\" component={Details} />\n          <Route exact path=\"/createGame\" component={CreateGame} />\n          <Route exact path=\"/editVideoGame/:id\" component={EditVideoGame} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nimport {\r\n    GET_ALL_VIDEOGAMES,\r\n    GET_VIDEOGAME_BY_ID,\r\n    CREATE_GAME,\r\n    GET_GENRES,\r\n    ORDER_ALPHABETICALLY,\r\n    ORDER_BY_RAITING,\r\n    FILTER_BY_GENRES,\r\n    GET_VIDEOGAMES_BY_ORIGIN,\r\n    GET_VIDEOGAMES_BY_NAME,\r\n    DELETED_GAME,\r\n    DELETE_STATES,\r\n   // MODIFY_GAME\r\n} from '../actions/types.js';\r\n\r\n/*\r\nSe define el estado inicial que contiene los campos videogames, \r\ngetAllVideoGames, \r\ngetAllVideoGames2, genres y details.\r\n */\r\nconst initialState = {\r\n    videogames: [], // este estado se llama ni bien se ejecuta la app\r\n    getAllVideoGames: [], //LA COPIA DONDE FILTRO PARA PISAR VIDEOGAMES Y MOSTRAR\r\n    getAllVideoGames2: [],\r\n    genres: [], // este estado se llama ni bien se ejecuta la app\r\n    details: [],\r\n};\r\n\r\n//const generateNewId = () => {\r\n   // return Date.now().toString();\r\n//};\r\n\r\n/*\r\nEl reducer se encarga de manejar las acciones \r\ny actualizar el estado en función del tipo de acción recibida.\r\nCada caso dentro del switch maneja un tipo de acción específico \r\ny actualiza el estado correspondientemente.\r\n */\r\nfunction rootReducer(state = initialState, action) {\r\n    const {\r\n        type,\r\n        payload\r\n    } = action;\r\n\r\n    switch (type) {\r\n        /*\r\n        Por ejemplo, en el caso GET_ALL_VIDEOGAMES, \r\n        se verifica si ya existen juegos de video \r\n        (state.videogames.length > 0). Si existen, \r\n        se retorna el estado actual sin hacer cambios. \r\n        De lo contrario, se actualizan los campos \r\n        getAllVideoGames, videogames y details con los datos recibidos \r\n        en payload.\r\n         */\r\n        case GET_ALL_VIDEOGAMES:\r\n            if (state.videogames.length > 0) {\r\n                return {\r\n                    videogames: state.videogames,\r\n                    getAllVideoGames: state.getAllVideoGames\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                getAllVideoGames: payload,\r\n                videogames: payload,\r\n                details: [],\r\n            };\r\n\r\n            /*\r\n            Descripción: Esta acción se utiliza para obtener un videojuego específico \r\n            por su ID.\r\n            Propósito: Actualizar el estado con los detalles del videojuego seleccionado.\r\n            Resultado: El estado se actualiza con los detalles del videojuego \r\n            obtenidos en el campo payload del estado.\r\n             */\r\n        case GET_VIDEOGAME_BY_ID:\r\n            return {\r\n                ...state,\r\n                details: payload,\r\n            };\r\n\r\n            /*\r\n            Descripción: Esta acción se utiliza para crear un nuevo videojuego.\r\n            Propósito: No realiza cambios en el estado, solo indica que se ha creado un nuevo videojuego.\r\n            Resultado: No se realizan cambios en el estado.\r\n             */\r\n        case CREATE_GAME:\r\n            return {\r\n                ...state,\r\n            };\r\n\r\n          //  case MODIFY_GAME: {\r\n              //  const { id, data } = action.payload;\r\n       //   \r\n                // Verificar si el ID existe para determinar si es una actualización o creación\r\n              //  if (id) {\r\n                  // Actualización del videojuego existente\r\n                //  const updatedVideoGames = state.videogames.map((game) =>\r\n                 //   game.id === id ? { ...game, ...data } : game\r\n                //  );\r\n                //  return {\r\n                  //  ...state,\r\n                 //   videoGames: updatedVideoGames,\r\n                //  };\r\n               // } else {\r\n                  // Creación de un nuevo videojuego\r\n               //   const newVideoGame = {\r\n                  //  id: generateNewId(), // Generar un nuevo ID (puedes utilizar una función adecuada para generar IDs únicos)\r\n                //    ...data,\r\n                //  };\r\n                //  return {\r\n                 //   ...state,\r\n                  //  videoGames: [...state.videogames, newVideoGame],\r\n                 // };\r\n               // }\r\n            \r\n            \r\n            //};\r\n        \r\n        \r\n\r\n\r\n            /*\r\n            Descripción: Esta acción se utiliza para obtener todos los géneros de videojuegos disponibles.\r\n            Propósito: Actualizar el estado con la lista de géneros de videojuegos.\r\n            Resultado: El estado se actualiza con la lista de géneros obtenidos en el campo payload del estado, y el campo details se vacía.\r\n             */\r\n        case GET_GENRES:\r\n            return {\r\n                ...state,\r\n                details: [],\r\n                genres: payload,\r\n            };\r\n\r\n            /*\r\n            Descripción: Esta acción se utiliza para ordenar los videojuegos alfabéticamente \r\n            ascendente o descendente.\r\n            Propósito: Actualizar el estado con la lista de videojuegos ordenados.\r\n            Resultado: El estado se actualiza con la lista de videojuegos ordenados \r\n            alfabéticamente según la dirección especificada en el campo payload. \r\n            Los campos getAllVideoGames, videogames y getAllVideoGames2 se actualizan con la lista ordenada.\r\n             */\r\n        case ORDER_ALPHABETICALLY:\r\n            const sortedArr = payload === 'asc' ?\r\n                state.videogames.sort((a, b) => {\r\n                    let nameA = a.name.toLowerCase();\r\n                    let nameB = b.name.toLowerCase();\r\n                    if (nameA > nameB) {\r\n                        return 1\r\n                    }\r\n                    if (nameB > nameA) {\r\n                        return -1\r\n                    } else {\r\n                        return 0\r\n                    }\r\n                }) :\r\n                state.videogames.sort((a, b) => {\r\n                    let nameA = a.name.toLowerCase();\r\n                    let nameB = b.name.toLowerCase();\r\n                    if (nameA > nameB) {\r\n                        return -1\r\n                    }\r\n                    if (nameB > nameA) {\r\n                        return 1\r\n                    } else {\r\n                        return 0\r\n                    }\r\n                });\r\n            return {\r\n                ...state,\r\n                videogames: sortedArr,\r\n                getAllVideoGames: sortedArr,\r\n                getAllVideoGames2: sortedArr,\r\n            };\r\n\r\n            /*\r\n            Descripción: Esta acción se utiliza para ordenar los videojuegos por calificación \r\n            máxima o mínima.\r\n            Propósito: Actualizar el estado con la lista de videojuegos ordenados por \r\n            calificación.\r\n            Resultado: El estado se actualiza con la lista de videojuegos ordenados \r\n            por calificación según la dirección especificada en el campo payload. \r\n            Los campos getAllVideoGames, videogames y getAllVideoGames2 se actualizan con la lista ordenada.\r\n             */\r\n        case ORDER_BY_RAITING:\r\n            const ratingFiltered = payload === 'max' ?\r\n                state.videogames.sort((a, b) => {\r\n                    if (a.rating < b.rating) {\r\n                        return 1\r\n                    }\r\n                    if (b.rating < a.rating) {\r\n                        return -1\r\n                    } else {\r\n                        return 0\r\n                    }\r\n                }) :\r\n                state.videogames.sort((a, b) => {\r\n                    if (a.rating < b.rating) {\r\n                        return -1\r\n                    }\r\n                    if (b.rating < a.rating) {\r\n                        return 1\r\n                    } else {\r\n                        return 0\r\n                    }\r\n                });\r\n            return {\r\n                ...state,\r\n                getAllVideoGames: ratingFiltered,\r\n                videogames: ratingFiltered,\r\n                getAllVideoGames2: ratingFiltered,\r\n            };\r\n\r\n\r\n            /*\r\n            Descripción: Esta acción se utiliza para filtrar los videojuegos por género.\r\n            Propósito: Actualizar el estado con la lista de videojuegos filtrados por género.\r\n            Resultado: El estado se actualiza con la lista de videojuegos filtrados \r\n            por el género especificado en el campo payload. \r\n            Los campos getAllVideoGames y videogames se actualizan con la lista filtrada.\r\n             */\r\n        case FILTER_BY_GENRES:\r\n            const allVideoGames = state.getAllVideoGames;\r\n            const filteredArr =\r\n                allVideoGames.filter(el => el.genres.includes(payload))\r\n            return {\r\n                ...state,\r\n                getAllVideoGames: state.getAllVideoGames,\r\n                videogames: filteredArr\r\n            };\r\n\r\n\r\n            /*\r\n            Descripción: Esta acción se utiliza para obtener los videojuegos según su origen \r\n            (creados o provenientes de una API externa).\r\n            Propósito: Actualizar el estado con la lista de videojuegos según \r\n            el origen especificado.\r\n            Resultado: El estado se actualiza con la lista de videojuegos filtrados \r\n            según el origen especificado en el campo payload. \r\n            El campo videogames se actualiza con la lista filtrada.\r\n             */\r\n        case GET_VIDEOGAMES_BY_ORIGIN:\r\n            let filterMyGames;\r\n            if (payload === 'Created') {\r\n                filterMyGames = state.getAllVideoGames.filter(el => el.createdInDb === true)\r\n                return {\r\n                    ...state,\r\n                    videogames: filterMyGames\r\n                }\r\n            } else if (payload === 'From Api') {\r\n                filterMyGames = state.getAllVideoGames.filter(el => !el.createdInDb)\r\n                return {\r\n                    ...state,\r\n                    videogames: filterMyGames\r\n                }\r\n            } else if (payload === 'All') {\r\n                filterMyGames = state.getAllVideoGames\r\n                return {\r\n                    ...state,\r\n                    videogames: filterMyGames\r\n                }\r\n            };\r\n            break;\r\n\r\n\r\n            /*\r\n            Descripción: Esta acción se utiliza para obtener los videojuegos según su nombre.\r\n            Propósito: Actualizar el estado con la lista de videojuegos filtrados por nombre.\r\n            Resultado: El estado se actualiza con la lista de videojuegos filtrados \r\n            según el nombre especificado en el campo payload. \r\n            El campo videogames se actualiza con la lista filtrada.\r\n             */\r\n        case GET_VIDEOGAMES_BY_NAME:\r\n            return {\r\n                ...state,\r\n                videogames: payload\r\n            };\r\n\r\n\r\n            /*\r\n            Descripción: Esta acción se utiliza para eliminar un videojuego.\r\n            Propósito: Actualizar el estado eliminando el videojuego especificado.\r\n            Resultado: El estado se actualiza eliminando \r\n            el videojuego especificado en el campo payload del estado.\r\n             */\r\n        case DELETED_GAME:\r\n\r\n            return {\r\n                ...state,\r\n                videogames: payload\r\n            };\r\n\r\n\r\n            /*\r\n            Descripción: Esta acción se utiliza para restablecer el estado a su valor inicial.\r\n            Propósito: Restablecer el estado eliminando todos los datos \r\n            de videojuegos, géneros y detalles.\r\n            Resultado: El estado se restablece a su valor inicial, es decir, \r\n            los campos videogames, getAllVideoGames, genres y details se vacían.\r\n             */\r\n        case DELETE_STATES:\r\n            return {\r\n                videogames: [],\r\n                getAllVideoGames: [],\r\n                genres: [],\r\n                details: [],\r\n            };\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default rootReducer;","\r\n//STORE\r\n/*\r\nimport { legacy_createStore as createStore, applyMiddleware } from 'redux';\r\n\r\nImporta la función createStore de Redux para crear el store y applyMiddleware \r\npara aplicar middlewares.\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nImporta la función composeWithDevTools de la extensión redux-devtools-extension, \r\nque permite utilizar la extensión de Redux DevTools para facilitar el debugging \r\ndel estado de la aplicación.\r\nimport thunk from 'redux-thunk';\r\n\r\nImporta el middleware redux-thunk. Thunk es un middleware que permite el manejo \r\nde acciones asíncronas en Redux, \r\nlo que te permite realizar acciones asíncronas como solicitudes HTTP \r\nantes de que se envíen las acciones al reducer.\r\n\r\nimport rootReducer from '../reducer/index.js';\r\n\r\nImporta el reducer principal (rootReducer) que combina todos los reducers \r\nde la aplicación en uno solo.\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nCrea el store de Redux utilizando la función createStore.\r\nrootReducer se pasa como argumento para definir cómo se actualiza el estado de la aplicación \r\nen respuesta a las acciones.\r\n\r\ncomposeWithDevTools se utiliza para aplicar la extensión de Redux DevTools al store.\r\napplyMiddleware(thunk) se utiliza para aplicar el middleware redux-thunk al store, \r\nlo que permite el manejo de acciones asíncronas.\r\n */\r\nimport { legacy_createStore as createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../reducer/index.js'\r\n\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from '../src/store/index.js'\nimport { Provider } from \"react-redux\";\n\n// Renderizo la app\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App/>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}